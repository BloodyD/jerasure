package de.uni_postdam.hpi.tests.jerasure;

import static org.junit.Assert.*;

import org.junit.Test;

import de.uni_postdam.hpi.jerasure.JErasure;
import de.uni_postdam.hpi.matrix.Schedule;

public class JErasureTest {

	@Test
	public void test_encoding() {

		int k, m, w, packetSize;
		byte[] data = null;
		byte[] should = null;
		byte[] coding = null;
		Schedule[] schedules = null;

		k = 3; m = 1; w = 2; packetSize = 2;
		schedules = Schedule.generate(k, m, w);
		data = new byte[]{
				// k1
				0x00, 0x26, 0x1e, 0x27, 
				// k2 
				0x52, (byte) 0xf6, 0x09, (byte) 0x85, 
				// k3 
				0x22, (byte) 0x97, 0x2e, 0x15, };
		should = new byte[]{ 
				// k1
				0x00, 0x26, 0x1e, 0x27, 
				// k2
				0x52, (byte) 0xf6, 0x09, (byte) 0x85, 
				// k3
				0x22, (byte) 0x97, 0x2e, 0x15, 
				// m1
				0x70, 0x47, 0x39, (byte) 0xb7 };
		
		coding = JErasure.encode(k, m, w, schedules, data, packetSize);
		
		assertArrayEquals(should, coding);
		
		
		k = 3; m = 1; w = 4; packetSize = 2;
		schedules = Schedule.generate(k, m, w);
		data = new byte[]{
				// k1
				0x00, 0x26, 0x1e, 0x27,
				0x52, (byte) 0xf6, 0x09, (byte) 0x85,
				// k2
				0x22, (byte) 0x97, 0x2e, 0x15,
				0x20, (byte) 0xad, 0x7e, 0x1d,
				// k3				
				0x28, (byte) 0xd2, 0x77, (byte) 0x94,
				0x16, (byte) 0xdd, 0x6d, (byte) 0xc4,
		};
		should = new byte[]{
				// k1
				0x00, 0x26, 0x1e, 0x27,
				0x52, (byte) 0xf6, 0x09, (byte) 0x85,
				// k2
				0x22, (byte) 0x97, 0x2e, 0x15,
				0x20, (byte) 0xad, 0x7e, 0x1d,
				// k3				
				0x28, (byte) 0xd2, 0x77, (byte) 0x94,
				0x16, (byte) 0xdd, 0x6d, (byte) 0xc4,
				// m1
				0x0a, 0x63, 0x47, (byte) 0xa6,
				0x64, (byte) 0x86, 0x1a, 0x5c,
		};

		coding = JErasure.encode(k, m, w, schedules, data, packetSize);
		
		assertArrayEquals(should, coding);
		
		
		k = 3; m = 2; w = 4; packetSize = 2;
		schedules = Schedule.generate(k, m, w);
		data = new byte[]{
				// k1
				0x00, 0x26, 0x1e, 0x27,
				0x52, (byte) 0xf6, 0x09, (byte) 0x85,
				// k2
				0x22, (byte) 0x97, 0x2e, 0x15,
				0x20, (byte) 0xad, 0x7e, 0x1d,
				// k3
				0x28, (byte) 0xd2, 0x77, (byte) 0x94,
				0x16, (byte) 0xdd, 0x6d, (byte) 0xc4,
		};
		
		should = new byte[]{
				// k1
				0x00, 0x26, 0x1e, 0x27,
				0x52, (byte) 0xf6, 0x09, (byte) 0x85,
				// k2
				0x22, (byte) 0x97, 0x2e, 0x15,
				0x20, (byte) 0xad, 0x7e, 0x1d,
				// k3
				0x28, (byte) 0xd2, 0x77, (byte) 0x94,
				0x16, (byte) 0xdd, 0x6d, (byte) 0xc4,
				// m1
				0x0a, 0x63, 0x47, (byte) 0xa6,
				0x64, (byte) 0x86, 0x1a, 0x5c,
				// m2
				0x21, 0x7d, 0x54, 0x70, 
				0x11, 0x27, 0x01, (byte) 0xfa
		};

		coding = JErasure.encode(k, m, w, schedules, data, packetSize);
		
		assertArrayEquals(should, coding);
	}
}
